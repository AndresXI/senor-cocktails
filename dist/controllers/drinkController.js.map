{"version":3,"sources":["../../api/controllers/drinkController.js"],"names":["getDrinkById","req","res","drinkId","params","data","response","process","env","THE_COCKTAIL_DB_BASE_URL","json","err","status","error","drink","drinks","normalizedDrink","id","idDrink","name","strDrink","tags","strTags","split","category","strCategory","IBA","strIBA","alcoholic","strAlcoholic","glassType","strGlass","instructions","EN","strInstructions","DE","strInstructionsDE","ES","strInstructionsES","FR","strInstructionsFR","image","strDrinkThumb","ingredients","rating","triedIt","createdAt","dateModified","getDrinkList","listSelection","toLowerCase","ok","normalizedDrinkList","map"],"mappings":"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","sourcesContent":["import asyncHandler from 'express-async-handler'\nimport fetch from 'node-fetch'\n\nimport { normalizeIngredients } from '../utils/utils'\n\n// @route GET api/v1/drinks/drinkId\n// @desc get a drink by id\n// @access public\nconst getDrinkById = asyncHandler(async (req, res) => {\n  const { drinkId } = req.params\n  let data\n\n  const response = await fetch(\n    `${process.env.THE_COCKTAIL_DB_BASE_URL}/lookup.php?i=${drinkId}`\n  )\n\n  try {\n    data = await response.json()\n  } catch (err) {\n    res.status(404).json({ error: 'Drink not found' })\n  }\n\n  const drink = data.drinks[0]\n  const normalizedDrink = {\n    id: drink.idDrink,\n    name: drink.strDrink,\n    tags: drink.strTags !== null ? [...drink.strTags.split(',')] : [],\n    category: drink.strCategory,\n    IBA: drink.strIBA,\n    alcoholic: drink.strAlcoholic,\n    glassType: drink.strGlass,\n    instructions: {\n      EN: drink.strInstructions,\n      DE: drink.strInstructionsDE,\n      ES: drink.strInstructionsES,\n      FR: drink.strInstructionsFR,\n    },\n    image: drink.strDrinkThumb,\n    ingredients: normalizeIngredients(drink),\n    rating: 0,\n    triedIt: false,\n    createdAt: drink.dateModified,\n  }\n\n  res.status(200).json(normalizedDrink)\n})\n\n// @route GET api/v1/drinks/list/:drinkList\n// @desc get a selection of drinks (random, latest, popular)\n// @access public and private\nconst getDrinkList = asyncHandler(async (req, res) => {\n  const listSelection = req.params.listSelection.toLowerCase()\n\n  const response = await fetch(\n    `${process.env.THE_COCKTAIL_DB_BASE_URL}/${listSelection}.php`\n  )\n\n  if (!response.ok) {\n    res.status(404).json({ error: 'Invalid request' })\n  }\n\n  const { drinks } = await response.json()\n\n  const normalizedDrinkList = drinks.map((drink) => {\n    return {\n      id: drink.idDrink,\n      name: drink.strDrink,\n      tags: drink.strTags !== null ? [...drink.strTags.split(',')] : [],\n      category: drink.strCategory,\n      IBA: drink.strIBA,\n      alcoholic: drink.strAlcoholic,\n      glassType: drink.strGlass,\n      instructions: {\n        EN: drink.strInstructions,\n        DE: drink.strInstructionsDE,\n        ES: drink.strInstructionsES,\n        FR: drink.strInstructionsFR,\n      },\n      image: drink.strDrinkThumb,\n      ingredients: normalizeIngredients(drink),\n      rating: 0,\n      triedIt: false,\n      createdAt: drink.dateModified,\n    }\n  })\n  res.status(200).json(normalizedDrinkList)\n})\n\nexport { getDrinkList, getDrinkById }\n"],"file":"drinkController.js"}