{"version":3,"sources":["../../api/controllers/drinkController.js"],"names":["getDrinkById","req","res","drinkId","params","process","env","THE_COCKTAIL_DB_BASE_URL","response","json","data","status","error","drink","drinks","normalizedDrink","id","idDrink","name","strDrink","tags","strTags","split","category","strCategory","IBA","strIBA","alcoholic","strAlcoholic","glassType","strGlass","instructions","EN","strInstructions","DE","strInstructionsDE","ES","strInstructionsES","FR","strInstructionsFR","image","strDrinkThumb","ingredients","rating","triedIt","createdAt","dateModified","getDrinkList","listSelection","ok","normalizedDrinkList","map"],"mappings":"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","sourcesContent":["import asyncHandler from 'express-async-handler'\nimport fetch from 'node-fetch'\n\nimport { normalizeIngredients } from '../utils/utils'\n\nconst getDrinkById = asyncHandler(async (req, res) => {\n  const { drinkId } = req.params\n  let data\n\n  const response = await fetch(\n    `${process.env.THE_COCKTAIL_DB_BASE_URL}/lookup.php?i=${drinkId}`\n  )\n\n  try {\n    data = await response.json()\n  } catch (err) {\n    res.status(404).json({ error: 'Drink not found' })\n  }\n\n  const drink = data.drinks[0]\n  const normalizedDrink = {\n    id: drink.idDrink,\n    name: drink.strDrink,\n    tags: drink.strTags !== null ? [...drink.strTags.split(',')] : [],\n    category: drink.strCategory,\n    IBA: drink.strIBA,\n    alcoholic: drink.strAlcoholic,\n    glassType: drink.strGlass,\n    instructions: {\n      EN: drink.strInstructions,\n      DE: drink.strInstructionsDE,\n      ES: drink.strInstructionsES,\n      FR: drink.strInstructionsFR,\n    },\n    image: drink.strDrinkThumb,\n    ingredients: normalizeIngredients(drink),\n    rating: 0,\n    triedIt: false,\n    createdAt: drink.dateModified,\n  }\n\n  res.status(200).json(normalizedDrink)\n})\n\nconst getDrinkList = asyncHandler(async (req, res) => {\n  const { listSelection } = req.params\n\n  const response = await fetch(\n    `${process.env.THE_COCKTAIL_DB_BASE_URL}/${listSelection}.php`\n  )\n\n  if (!response.ok) {\n    res.status(404).json({ error: 'Invalid request' })\n  }\n\n  const { drinks } = await response.json()\n\n  const normalizedDrinkList = drinks.map((drink) => {\n    return {\n      id: drink.idDrink,\n      name: drink.strDrink,\n      tags: drink.strTags !== null ? [...drink.strTags.split(',')] : [],\n      category: drink.strCategory,\n      IBA: drink.strIBA,\n      alcoholic: drink.strAlcoholic,\n      glassType: drink.strGlass,\n      instructions: {\n        EN: drink.strInstructions,\n        DE: drink.strInstructionsDE,\n        ES: drink.strInstructionsES,\n        FR: drink.strInstructionsFR,\n      },\n      image: drink.strDrinkThumb,\n      ingredients: normalizeIngredients(drink),\n      rating: 0,\n      triedIt: false,\n      createdAt: drink.dateModified,\n    }\n  })\n  res.status(200).json(normalizedDrinkList)\n})\n\nexport { getDrinkList, getDrinkById }\n"],"file":"drinkController.js"}